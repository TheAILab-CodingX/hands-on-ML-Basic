# -*- coding: utf-8 -*-
"""hands-on-ML-Basic-과제(2)-건강상태예측(다항분류)-an example of a solution

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OerFKW3GovV9RWSD-Gt-w768hW6OxmSx

**2-01.문제이해**
- 건강 상태 분류문제 : https://www.kaggle.com/datasets/alphiree/cardiovascular-diseases-risk-prediction-dataset
- health_train.csv : 학습 및 학습평가에 사용하는 파일
- health_test.csv : 제출용 데이터 생성에 사용하는 파일
- 예측할 값(y): General_Health
- 주의사항 : 예측값이 0, 1, 2 아님 ('Excellent', 'Good', 'Fair')
- 평가: f1_score (macro)
- 아래의 형식으로 result.csv 로 저장
- 제출형식
        pred
        Good
        Fair
        Good
        Excellent

**2-02.문제풀이**

XY = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/health_train.csv')
X_submission = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/health_test.csv')
"""

# [1] import library
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import f1_score, roc_auc_score, accuracy_score
from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier

# [2] 파일 가져오기 (2개, XX_train.csv, XX_test.csv)
XY = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/health_train.csv')
X_submission = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/health_test.csv')
print(XY.head(2))
#print(X_submission.head(2))

X = XY.drop(columns=['General_Health'])
Y = XY['General_Health']
#print(Y.value_counts(normalize=True))  # ['Good', 'Excellent', 'Fair], 비슷한 분포
print(X.shape, Y.shape, X_submission.shape)  # (8977, 19) (8977,) (3848, 19)

# [3] 데이터 탐색 (XY.info(), X_submission.info()) 결측치, 컬럼 dtype
#X.info()
#print(X.nunique())
#print(X[two_cat].nunique())

#obj_colnames = X.select_dtypes(include=['object']).columns
#print(obj_colnames)
#for colname in obj_colnames:
#    print(X[colname].unique())
#    print(X_submission[colname].unique())
#temp = XY[['ID', 'General_Health']]
#print(temp.head(10))
#print(temp.sort_values('ID').head(20))

# [4] 데이터 전처리


# [3-3] X_all : Scaling (안함, MinMaxScaler, StandardScaler, ...)
# [3-4] X_all -> X, X_submission 분리

# [4-1] X, X_submission -> X_all
# 칼럼 제거 : 'ID'
X_all = pd.concat([X, X_submission], axis=0)
X_all = X_all.drop(columns=['ID'])

# [3-2] X_all : 컬럼제거, 컬럼 dtype 변경(컬럼의 값을 대체), Encoding(범주형->수치형)
# Label Encoding : ['Exercise', 'Heart_Disease', 'Skin_Cancer', 'Other_Cancer', 'Depression', 'Arthritis', 'Sex', 'Smoking_History', 'Age_Category'
# OneHot Encoding : 'Chec'kup', 'Diabetes', 'Age_Category'
X_all['Exercise'] = LabelEncoder().fit_transform(X_all['Exercise'])
X_all['Heart_Disease'] = LabelEncoder().fit_transform(X_all['Heart_Disease'])
X_all['Skin_Cancer'] = LabelEncoder().fit_transform(X_all['Skin_Cancer'])
X_all['Other_Cancer'] = LabelEncoder().fit_transform(X_all['Other_Cancer'])
X_all['Depression'] = LabelEncoder().fit_transform(X_all['Depression'])
X_all['Arthritis'] = LabelEncoder().fit_transform(X_all['Arthritis'])
X_all['Sex'] = LabelEncoder().fit_transform(X_all['Sex'])
X_all['Smoking_History'] = LabelEncoder().fit_transform(X_all['Smoking_History'])
X_all['Age_Category'] = LabelEncoder().fit_transform(X_all['Age_Category'])

X_all = pd.get_dummies(X_all)
print(X_all.shape)  # (12825, 25)

X = X_all.iloc[:len(X), :]
X_submission = X_all.iloc[len(X):, :]
print(X.shape, X_submission.shape)  # (8977, 25) (3848, 25)

# [4] 모델링

# [4-1] train_test_split : (X, Y) -> (x_train, x_test, y_train, y_test)
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=42)

# [4-2] 모델객체 생성, 학습 (x_train, y_train) / # [4-3] 평가 (x_train, y_train), (x_test, y_test)
# acc: 0.5517817371937639,  f1: 0.5353914441047433
# model = RandomForestClassifier(max_depth=3, random_state=42).fit(x_train, y_train)
# y_pred=model.predict(x_test)

# acc=accuracy_score(y_test, y_pred)
# f1=f1_score(y_test, y_pred, average='macro')
# print(acc, f1)

# acc: 0.5267260579064588, f1: 0.5178735459041452
# model2 = DecisionTreeClassifier(max_depth=3, random_state=42).fit(x_train, y_train)
# y_pred=model3.predict(x_test)

# acc=accuracy_score(y_test, y_pred)
# f1=f1_score(y_test, y_pred, average='macro')
# print(acc, f1)


# acc: 0.5556792873051225, f1: 0.553955308261355
model3 = AdaBoostClassifier(random_state=42).fit(x_train, y_train)
y_pred=model3.predict(x_test)

acc=accuracy_score(y_test, y_pred)
f1=f1_score(y_test, y_pred, average='macro')
print(acc, f1)

# [5] 최종모델 선택, 예측값(X_submission), 제출파일생성
fmodel = model3
result = fmodel.predict(X_submission)
pd.DataFrame({'pred': result}).to_csv('result.csv', index=False)

# [6] 제출한 파일 확인
temp = pd.read_csv('result.csv')
print(temp.shape)  # (3848, 1)
print(temp.head())
print(Y.value_counts(normalize=True))
print(temp['pred'].value_counts(normalize=True))
# -*- coding: utf-8 -*-
"""hands-on-ML-Basic-과제(3)-아웃렛의 amount 예측(회귀)-an example of a solution

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19H_CXixmFZTTGPZCHXWOTIr7-cT2s9Qb

**문제이해**

**아웃렛의 amount(매출액) 예측하기**'

- outlet_train.csv : 학습 및 학습평가에 사용하는 파일
- outlet_test.csv : 제출용 데이터 생성에 사용하는 파일
- 예측할 값(y): amount
- 평가: RMSE
- 범주형 변수 전치리, 대표적으로 RandomForestRegressor 모델은 포함
- 아래의 형식으로 result.csv 로 저장
- 제출형식
        pred
        3865.718799
        4335.691752
        3140.762272
        1411.627756
        1866.883742

[데이터셑 경로]

XY = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/outlet_train.csv')

X_submission = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/outlet_test.csv')
"""

# [1] import library

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error as MSE
from sklearn.metrics import r2_score # 결정계수 (1에 가까울수록)

# [1] 파일 가져오기 (2개, XX_train.csv, XX_test.csv)
XY = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/outlet_train.csv')
X_submission = pd.read_csv('https://raw.githubusercontent.com/TheAILab-CodingX/hands-on-ML-Basic/refs/heads/main/outlet_test.csv')

#print(XY.head(2))
#print(X_submission.head(2))
#print(XY.shape, X_submission.shape)  # (4650, 12) (1800, 11)

X = XY.drop(columns=['amount'])
Y = XY['amount']

#print('Y의 음수개수', (Y < 0).sum())
#print(Y.min())  # 69.2432
#print(X.shape, Y.shape, X_submission.shape)  # (4650, 11) (4650,) (1800, 11)

# [2] 데이터 탐색 (결측치, 컬럼 dtype)

#XY.info()
#obj_columns = XY.select_dtypes(include=['object'])
#print(obj_columns.nunique())

# 제거컬럼 : Item_Identifier
# LabelEncoder : Item_Type, Outlet_Type
# OneHotEncoding : Item_Fat_Content, Outlet_Identifier, Outlet_Size, Outlet_Location_Type

#obj_columns = XY.select_dtypes(include=['object']).columns

# for column in list(obj_columns) + ['Outlet_Establishment_Year']:
#     print(sorted(X[column].unique()))
#     print(sorted(X_submission[column].unique()))

# exobj_columns = XY.select_dtypes(exclude=['object'])
# print(exobj_columns.nunique())

# [3] 데이터 전처리

# [3-1] X, X_submission -> X_all
X_all = pd.concat([X, X_submission], axis=0)

# [3-2] X_all : 컬럼제거, 컬럼 dtype 변경(컬럼의 값을 대체), Encoding(범주형->수치형)
X_all = X_all.drop(columns=['Item_Identifier']) # 1. 불필요한 컬럼 제거
X_all['Item_Type'] = LabelEncoder().fit_transform(X_all['Item_Type'])
X_all['Outlet_Type'] = LabelEncoder().fit_transform(X_all['Outlet_Type'])

obj_columns = X_all.select_dtypes(include='object').columns.tolist() # Object 타입 컬럼 선별
#obj_columns = XY.select_dtypes(include=['object'])
X_all = pd.get_dummies(X_all, columns=obj_columns) # 원핫인코딩 (범주형 → 수치형 변환)

# [3-3] X_all : Scaling (안함, MinMaxScaler, StandardScaler, ...)
X_all_scaled = StandardScaler().fit_transform(X_all)
X_all = pd.DataFrame(X_all_scaled, columns=X_all.columns)

# [3-4] X_all -> X, X_submission 분리
X = X_all.iloc[:len(X), :]
X_submission = X_all.iloc[len(X):, :]
print(X.shape, X_submission.shape)

# [4] 모델링

# [4-1] train_test_split : (X, Y) -> (x_train, x_test, y_train, y_test)
temp = train_test_split(X, Y, test_size=0.2, random_state=42)
x_train, x_test, y_train, y_test = temp
#print([x.shape for x in temp])  # [(3720, 22), (930, 22), (3720,), (930,)]


# [4-2] 모델객체 생성, 학습 (x_train, y_train)
# r2: 0.4875888242520645,  rmse: 1052.2824390960207
model = RandomForestRegressor(max_depth=3, random_state=42).fit(x_train, y_train)
y_pred = model.predict(x_test)

# [4-3] 평가 (x_train, y_train), (x_test, y_test)
rmse = np.sqrt(MSE(y_test, y_pred)) #RMSE 계산
print("RMSE:", rmse)

r2 =  r2_score(y_test, y_pred) #RMSE 계산
print("r2:", r2)

# [5] 모델 선택, 예측값(X_submission), 제출파일생성
result = model.predict(X_submission)
result = np.where(result < 0, 0, result)   # 0
pd.DataFrame({'pred': result}).to_csv('result.csv', index=False)

# [6] 제출한 파일 확인
temp = pd.read_csv('result.csv')
print(temp.shape)  # (1800, 1)
print(temp.head(2))

print(Y.describe())
# count    4650.0000